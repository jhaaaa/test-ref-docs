{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/client\/address","title":"var address: String","type":"property"},{"path":"\/documentation\/xmtp\/client\/contacts","title":"var contacts: Contacts","type":"property"},{"path":"\/documentation\/xmtp\/client\/conversations","title":"var conversations: Conversations","type":"property"},{"path":"\/documentation\/xmtp\/client\/environment","title":"var environment: XMTPEnvironment","type":"property"},{"path":"\/documentation\/xmtp\/client\/keys","title":"var keys: PrivateKeyBundleV2","type":"property"},{"path":"\/documentation\/xmtp\/client\/privatekeybundle","title":"var privateKeyBundle: PrivateKeyBundle","type":"property"},{"path":"\/documentation\/xmtp\/client\/v1keys","title":"var v1keys: PrivateKeyBundleV1","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/client\/canmessage(_:)","title":"func canMessage(String) async throws -> Bool","type":"method"},{"path":"\/documentation\/xmtp\/client\/importconversation(from:)","title":"func importConversation(from: Data) throws -> Conversation?","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/client\/create(account:options:)","title":"static func create(account: SigningKey, options: ClientOptions?) async throws -> Client","type":"method"},{"path":"\/documentation\/xmtp\/client\/from(bundle:options:)","title":"static func from(bundle: PrivateKeyBundle, options: ClientOptions?) throws -> Client","type":"method"},{"path":"\/documentation\/xmtp\/client\/from(v1bundle:options:)","title":"static func from(v1Bundle: PrivateKeyBundleV1, options: ClientOptions?) throws -> Client","type":"method"},{"path":"\/documentation\/xmtp\/client\/register(codec:)","title":"static func register(codec: any ContentCodec)","type":"method"}],"path":"\/documentation\/xmtp\/client","title":"Client","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversations\/fromintro(envelope:)","title":"func fromIntro(envelope: Envelope) throws -> Conversation","type":"method"},{"path":"\/documentation\/xmtp\/conversations\/frominvite(envelope:)","title":"func fromInvite(envelope: Envelope) throws -> Conversation","type":"method"},{"path":"\/documentation\/xmtp\/conversations\/list()","title":"func list() async throws -> [Conversation]","type":"method"},{"path":"\/documentation\/xmtp\/conversations\/newconversation(with:context:)","title":"func newConversation(with: String, context: InvitationV1.Context?) async throws -> Conversation","type":"method"},{"path":"\/documentation\/xmtp\/conversations\/stream()","title":"func stream() -> AsyncThrowingStream<Conversation, Error>","type":"method"},{"path":"\/documentation\/xmtp\/conversations\/streamallmessages()","title":"func streamAllMessages() async throws -> AsyncThrowingStream<DecodedMessage, Error>","type":"method"}],"path":"\/documentation\/xmtp\/conversations","title":"Conversations","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/init(client:)","title":"init(client: Connect.ProtocolClientInterface)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/deleteinstallation(request:headers:)","title":"func deleteInstallation(request: Notifications_V1_DeleteInstallationRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/deleteinstallation(request:headers:completion:)","title":"func deleteInstallation(request: Notifications_V1_DeleteInstallationRequest, headers: Connect.Headers, completion: (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/registerinstallation(request:headers:)","title":"func registerInstallation(request: Notifications_V1_RegisterInstallationRequest, headers: Connect.Headers) async -> ResponseMessage<Notifications_V1_RegisterInstallationResponse>","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/registerinstallation(request:headers:completion:)","title":"func registerInstallation(request: Notifications_V1_RegisterInstallationRequest, headers: Connect.Headers, completion: (ResponseMessage<Notifications_V1_RegisterInstallationResponse>) -> Void) -> Connect.Cancelable","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/subscribe(request:headers:)","title":"func subscribe(request: Notifications_V1_SubscribeRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/subscribe(request:headers:completion:)","title":"func subscribe(request: Notifications_V1_SubscribeRequest, headers: Connect.Headers, completion: (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/unsubscribe(request:headers:)","title":"func unsubscribe(request: Notifications_V1_UnsubscribeRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/unsubscribe(request:headers:completion:)","title":"func unsubscribe(request: Notifications_V1_UnsubscribeRequest, headers: Connect.Headers, completion: (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/metadata\/methods\/deleteinstallation","title":"static let deleteInstallation: MethodSpec","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/metadata\/methods\/registerinstallation","title":"static let registerInstallation: MethodSpec","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/metadata\/methods\/subscribe","title":"static let subscribe: MethodSpec","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/metadata\/methods\/unsubscribe","title":"static let unsubscribe: MethodSpec","type":"property"}],"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/metadata\/methods","title":"Notifications_V1_NotificationsClient.Metadata.Methods","type":"enum"}],"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient\/metadata","title":"Notifications_V1_NotificationsClient.Metadata","type":"enum"}],"path":"\/documentation\/xmtp\/notifications_v1_notificationsclient","title":"Notifications_V1_NotificationsClient","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/xmtp\/contentcodec\/t","title":"T","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/contentcodec\/contenttype","title":"var contentType: ContentTypeID","type":"property"},{"path":"\/documentation\/xmtp\/contentcodec\/id","title":"var id: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/contentcodec\/decode(content:)","title":"func decode(content: EncodedContent) throws -> T","type":"method"},{"path":"\/documentation\/xmtp\/contentcodec\/encode(content:)","title":"func encode(content: T) throws -> EncodedContent","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/contentcodec\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/contentcodec\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/contentcodec\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xmtp\/contentcodec\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/contentcodec","title":"ContentCodec","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclientinterface\/deleteinstallation(request:headers:)","title":"func deleteInstallation(request: Notifications_V1_DeleteInstallationRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclientinterface\/deleteinstallation(request:headers:completion:)","title":"func deleteInstallation(request: Notifications_V1_DeleteInstallationRequest, headers: Connect.Headers, completion: (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclientinterface\/registerinstallation(request:headers:)","title":"func registerInstallation(request: Notifications_V1_RegisterInstallationRequest, headers: Connect.Headers) async -> ResponseMessage<Notifications_V1_RegisterInstallationResponse>","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclientinterface\/registerinstallation(request:headers:completion:)","title":"func registerInstallation(request: Notifications_V1_RegisterInstallationRequest, headers: Connect.Headers, completion: (ResponseMessage<Notifications_V1_RegisterInstallationResponse>) -> Void) -> Connect.Cancelable","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclientinterface\/subscribe(request:headers:)","title":"func subscribe(request: Notifications_V1_SubscribeRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclientinterface\/subscribe(request:headers:completion:)","title":"func subscribe(request: Notifications_V1_SubscribeRequest, headers: Connect.Headers, completion: (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclientinterface\/unsubscribe(request:headers:)","title":"func unsubscribe(request: Notifications_V1_UnsubscribeRequest, headers: Connect.Headers) async -> ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_notificationsclientinterface\/unsubscribe(request:headers:completion:)","title":"func unsubscribe(request: Notifications_V1_UnsubscribeRequest, headers: Connect.Headers, completion: (ResponseMessage<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) -> Connect.Cancelable","type":"method"}],"path":"\/documentation\/xmtp\/notifications_v1_notificationsclientinterface","title":"Notifications_V1_NotificationsClientInterface","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/signingkey\/address","title":"var address: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/signingkey\/sign(_:)","title":"func sign(Data) async throws -> Signature","type":"method"},{"path":"\/documentation\/xmtp\/signingkey\/sign(message:)","title":"func sign(message: String) async throws -> Signature","type":"method"}],"path":"\/documentation\/xmtp\/signingkey","title":"SigningKey","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachment\/init(filename:mimetype:data:)","title":"init(filename: String, mimeType: String, data: Data)","type":"init"},{"path":"\/documentation\/xmtp\/attachment\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachment\/data","title":"var data: Data","type":"property"},{"path":"\/documentation\/xmtp\/attachment\/filename","title":"var filename: String","type":"property"},{"path":"\/documentation\/xmtp\/attachment\/mimetype","title":"var mimeType: String","type":"property"}],"path":"\/documentation\/xmtp\/attachment","title":"Attachment","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachmentcodec\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachmentcodec\/contenttype","title":"var contentType: ContentTypeID","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachmentcodec\/decode(content:)","title":"func decode(content: EncodedContent) throws -> Attachment","type":"method"},{"path":"\/documentation\/xmtp\/attachmentcodec\/encode(content:)","title":"func encode(content: Attachment) throws -> EncodedContent","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachmentcodec\/t","title":"AttachmentCodec.T","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachmentcodec\/id","title":"var id: String","type":"property"}],"path":"\/documentation\/xmtp\/attachmentcodec\/contentcodec-implementations","title":"ContentCodec Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachmentcodec\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/xmtp\/attachmentcodec\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/attachmentcodec\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachmentcodec\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xmtp\/attachmentcodec\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/attachmentcodec","title":"AttachmentCodec","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/clientoptions\/api-swift.struct\/init(env:issecure:)","title":"init(env: XMTPEnvironment, isSecure: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/clientoptions\/api-swift.struct\/env","title":"var env: XMTPEnvironment","type":"property"},{"path":"\/documentation\/xmtp\/clientoptions\/api-swift.struct\/issecure","title":"var isSecure: Bool","type":"property"}],"path":"\/documentation\/xmtp\/clientoptions\/api-swift.struct","title":"ClientOptions.Api","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/clientoptions\/init(api:codecs:)","title":"init(api: Api, codecs: [any ContentCodec])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/clientoptions\/api-swift.property","title":"var api: ClientOptions.Api","type":"property"},{"path":"\/documentation\/xmtp\/clientoptions\/codecs","title":"var codecs: [any ContentCodec]","type":"property"}],"path":"\/documentation\/xmtp\/clientoptions","title":"ClientOptions","type":"struct"},{"path":"\/documentation\/xmtp\/contacts","title":"Contacts","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationv1\/init(client:peeraddress:sentat:)","title":"init(client: Client, peerAddress: String, sentAt: Date)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationv1\/client","title":"var client: Client","type":"property"},{"path":"\/documentation\/xmtp\/conversationv1\/encodedcontainer","title":"var encodedContainer: ConversationV1Container","type":"property"},{"path":"\/documentation\/xmtp\/conversationv1\/peeraddress","title":"var peerAddress: String","type":"property"},{"path":"\/documentation\/xmtp\/conversationv1\/sentat","title":"var sentAt: Date","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationv1\/decode(envelope:)","title":"func decode(envelope: Envelope) throws -> DecodedMessage","type":"method"},{"path":"\/documentation\/xmtp\/conversationv1\/streammessages()","title":"func streamMessages() -> AsyncThrowingStream<DecodedMessage, Error>","type":"method"}],"path":"\/documentation\/xmtp\/conversationv1","title":"ConversationV1","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationv1container\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/xmtp\/conversationv1container","title":"ConversationV1Container","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationv2\/init(topic:keymaterial:context:peeraddress:client:)","title":"init(topic: String, keyMaterial: Data, context: InvitationV1.Context, peerAddress: String, client: Client)","type":"init"},{"path":"\/documentation\/xmtp\/conversationv2\/init(topic:keymaterial:context:peeraddress:client:header:)","title":"init(topic: String, keyMaterial: Data, context: InvitationV1.Context, peerAddress: String, client: Client, header: SealedInvitationHeaderV1)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationv2\/client","title":"var client: Client","type":"property"},{"path":"\/documentation\/xmtp\/conversationv2\/context","title":"var context: InvitationV1.Context","type":"property"},{"path":"\/documentation\/xmtp\/conversationv2\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/xmtp\/conversationv2\/encodedcontainer","title":"var encodedContainer: ConversationV2Container","type":"property"},{"path":"\/documentation\/xmtp\/conversationv2\/keymaterial","title":"var keyMaterial: Data","type":"property"},{"path":"\/documentation\/xmtp\/conversationv2\/peeraddress","title":"var peerAddress: String","type":"property"},{"path":"\/documentation\/xmtp\/conversationv2\/topic","title":"var topic: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationv2\/decode(envelope:)","title":"func decode(envelope: Envelope) throws -> DecodedMessage","type":"method"},{"path":"\/documentation\/xmtp\/conversationv2\/encode(codec:content:)","title":"func encode<Codec, T>(codec: Codec, content: T) async throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/conversationv2\/streammessages()","title":"func streamMessages() -> AsyncThrowingStream<DecodedMessage, Error>","type":"method"}],"path":"\/documentation\/xmtp\/conversationv2","title":"ConversationV2","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationv2container\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationv2container\/decode(with:)","title":"func decode(with: Client) -> ConversationV2","type":"method"}],"path":"\/documentation\/xmtp\/conversationv2container","title":"ConversationV2Container","type":"struct"},{"path":"\/documentation\/xmtp\/decodedcomposite","title":"DecodedComposite","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/decodedmessage\/init(encodedcontent:senderaddress:sent:)","title":"init(encodedContent: EncodedContent, senderAddress: String, sent: Date)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/decodedmessage\/encodedcontent","title":"var encodedContent: EncodedContent","type":"property"},{"path":"\/documentation\/xmtp\/decodedmessage\/fallbackcontent","title":"var fallbackContent: String","type":"property"},{"path":"\/documentation\/xmtp\/decodedmessage\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/xmtp\/decodedmessage\/senderaddress","title":"var senderAddress: String","type":"property"},{"path":"\/documentation\/xmtp\/decodedmessage\/sent","title":"var sent: Date","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/decodedmessage\/content()","title":"func content<T>() throws -> T","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/decodedmessage\/preview(body:senderaddress:sent:)","title":"static func preview(body: String, senderAddress: String, sent: Date) -> DecodedMessage","type":"method"}],"path":"\/documentation\/xmtp\/decodedmessage","title":"DecodedMessage","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/encryptedencodedcontent\/init(secret:digest:salt:nonce:payload:)","title":"init(secret: Data, digest: String, salt: Data, nonce: Data, payload: Data)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/encryptedencodedcontent\/digest","title":"var digest: String","type":"property"},{"path":"\/documentation\/xmtp\/encryptedencodedcontent\/nonce","title":"var nonce: Data","type":"property"},{"path":"\/documentation\/xmtp\/encryptedencodedcontent\/payload","title":"var payload: Data","type":"property"},{"path":"\/documentation\/xmtp\/encryptedencodedcontent\/salt","title":"var salt: Data","type":"property"},{"path":"\/documentation\/xmtp\/encryptedencodedcontent\/secret","title":"var secret: Data","type":"property"}],"path":"\/documentation\/xmtp\/encryptedencodedcontent","title":"EncryptedEncodedContent","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/installationid","title":"var installationID: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/unknownfields","title":"var unknownFields: UnknownStorage","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/==(_:_:)","title":"static func == (Notifications_V1_DeleteInstallationRequest, Notifications_V1_DeleteInstallationRequest) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/init(contiguousbytes:extensions:partial:options:)","title":"init<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/init(jsonstring:extensions:options:)","title":"init(jsonString: String, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/init(jsonstring:options:)","title":"init(jsonString: String, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/init(jsonutf8data:extensions:options:)","title":"init(jsonUTF8Data: Data, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/init(jsonutf8data:options:)","title":"init(jsonUTF8Data: Data, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/init(serializeddata:extensions:partial:options:)","title":"init(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/init(textformatstring:extensions:)","title":"init(textFormatString: String, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/init(textformatstring:options:extensions:)","title":"init(textFormatString: String, options: TextFormatDecodingOptions, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/init(unpackingany:extensions:options:)","title":"init(unpackingAny: Google_Protobuf_Any, extensions: ExtensionMap?, options: BinaryDecodingOptions) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/isinitialized","title":"var isInitialized: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/decodemessage(decoder:)","title":"func decodeMessage<D>(decoder: inout D) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/jsonstring(options:)","title":"func jsonString(options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/jsonutf8data(options:)","title":"func jsonUTF8Data(options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/merge(contiguousbytes:extensions:partial:options:)","title":"func merge<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/merge(serializeddata:extensions:partial:options:)","title":"func merge(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/serializeddata(partial:)","title":"func serializedData(partial: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/textformatstring()","title":"func textFormatString() -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/textformatstring(options:)","title":"func textFormatString(options: TextFormatEncodingOptions) -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/traverse(visitor:)","title":"func traverse<V>(visitor: inout V) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/protomessagename","title":"static let protoMessageName: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/array(fromjsonstring:extensions:options:)","title":"static func array(fromJSONString: String, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/array(fromjsonstring:options:)","title":"static func array(fromJSONString: String, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/array(fromjsonutf8data:extensions:options:)","title":"static func array(fromJSONUTF8Data: Data, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/array(fromjsonutf8data:options:)","title":"static func array(fromJSONUTF8Data: Data, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/jsonstring(from:options:)","title":"static func jsonString<C>(from: C, options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/jsonutf8data(from:options:)","title":"static func jsonUTF8Data<C>(from: C, options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/with(_:)","title":"static func with((inout Self) throws -> ()) rethrows -> Self","type":"method"}],"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest\/message-implementations","title":"Message Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/notifications_v1_deleteinstallationrequest","title":"Notifications_V1_DeleteInstallationRequest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/apnsdevicetoken","title":"var apnsDeviceToken: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/deliverymechanismtype","title":"var deliveryMechanismType: Notifications_V1_DeliveryMechanism.OneOf_DeliveryMechanismType?","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/firebasedevicetoken","title":"var firebaseDeviceToken: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/unknownfields","title":"var unknownFields: UnknownStorage","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/oneof_deliverymechanismtype\/apnsdevicetoken(_:)","title":"case apnsDeviceToken(String)","type":"case"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/oneof_deliverymechanismtype\/firebasedevicetoken(_:)","title":"case firebaseDeviceToken(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/oneof_deliverymechanismtype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/oneof_deliverymechanismtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/oneof_deliverymechanismtype","title":"Notifications_V1_DeliveryMechanism.OneOf_DeliveryMechanismType","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/==(_:_:)","title":"static func == (Notifications_V1_DeliveryMechanism, Notifications_V1_DeliveryMechanism) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/init(contiguousbytes:extensions:partial:options:)","title":"init<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/init(jsonstring:extensions:options:)","title":"init(jsonString: String, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/init(jsonstring:options:)","title":"init(jsonString: String, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/init(jsonutf8data:extensions:options:)","title":"init(jsonUTF8Data: Data, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/init(jsonutf8data:options:)","title":"init(jsonUTF8Data: Data, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/init(serializeddata:extensions:partial:options:)","title":"init(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/init(textformatstring:extensions:)","title":"init(textFormatString: String, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/init(textformatstring:options:extensions:)","title":"init(textFormatString: String, options: TextFormatDecodingOptions, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/init(unpackingany:extensions:options:)","title":"init(unpackingAny: Google_Protobuf_Any, extensions: ExtensionMap?, options: BinaryDecodingOptions) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/isinitialized","title":"var isInitialized: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/decodemessage(decoder:)","title":"func decodeMessage<D>(decoder: inout D) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/jsonstring(options:)","title":"func jsonString(options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/jsonutf8data(options:)","title":"func jsonUTF8Data(options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/merge(contiguousbytes:extensions:partial:options:)","title":"func merge<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/merge(serializeddata:extensions:partial:options:)","title":"func merge(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/serializeddata(partial:)","title":"func serializedData(partial: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/textformatstring()","title":"func textFormatString() -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/textformatstring(options:)","title":"func textFormatString(options: TextFormatEncodingOptions) -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/traverse(visitor:)","title":"func traverse<V>(visitor: inout V) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/protomessagename","title":"static let protoMessageName: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/array(fromjsonstring:extensions:options:)","title":"static func array(fromJSONString: String, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/array(fromjsonstring:options:)","title":"static func array(fromJSONString: String, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/array(fromjsonutf8data:extensions:options:)","title":"static func array(fromJSONUTF8Data: Data, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/array(fromjsonutf8data:options:)","title":"static func array(fromJSONUTF8Data: Data, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/jsonstring(from:options:)","title":"static func jsonString<C>(from: C, options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/jsonutf8data(from:options:)","title":"static func jsonUTF8Data<C>(from: C, options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/with(_:)","title":"static func with((inout Self) throws -> ()) rethrows -> Self","type":"method"}],"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism\/message-implementations","title":"Message Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/notifications_v1_deliverymechanism","title":"Notifications_V1_DeliveryMechanism","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/deliverymechanism","title":"var deliveryMechanism: Notifications_V1_DeliveryMechanism","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/hasdeliverymechanism","title":"var hasDeliveryMechanism: Bool","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/installationid","title":"var installationID: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/unknownfields","title":"var unknownFields: UnknownStorage","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/cleardeliverymechanism()","title":"func clearDeliveryMechanism()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/==(_:_:)","title":"static func == (Notifications_V1_RegisterInstallationRequest, Notifications_V1_RegisterInstallationRequest) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/init(contiguousbytes:extensions:partial:options:)","title":"init<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/init(jsonstring:extensions:options:)","title":"init(jsonString: String, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/init(jsonstring:options:)","title":"init(jsonString: String, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/init(jsonutf8data:extensions:options:)","title":"init(jsonUTF8Data: Data, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/init(jsonutf8data:options:)","title":"init(jsonUTF8Data: Data, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/init(serializeddata:extensions:partial:options:)","title":"init(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/init(textformatstring:extensions:)","title":"init(textFormatString: String, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/init(textformatstring:options:extensions:)","title":"init(textFormatString: String, options: TextFormatDecodingOptions, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/init(unpackingany:extensions:options:)","title":"init(unpackingAny: Google_Protobuf_Any, extensions: ExtensionMap?, options: BinaryDecodingOptions) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/isinitialized","title":"var isInitialized: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/decodemessage(decoder:)","title":"func decodeMessage<D>(decoder: inout D) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/jsonstring(options:)","title":"func jsonString(options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/jsonutf8data(options:)","title":"func jsonUTF8Data(options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/merge(contiguousbytes:extensions:partial:options:)","title":"func merge<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/merge(serializeddata:extensions:partial:options:)","title":"func merge(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/serializeddata(partial:)","title":"func serializedData(partial: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/textformatstring()","title":"func textFormatString() -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/textformatstring(options:)","title":"func textFormatString(options: TextFormatEncodingOptions) -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/traverse(visitor:)","title":"func traverse<V>(visitor: inout V) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/protomessagename","title":"static let protoMessageName: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/array(fromjsonstring:extensions:options:)","title":"static func array(fromJSONString: String, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/array(fromjsonstring:options:)","title":"static func array(fromJSONString: String, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/array(fromjsonutf8data:extensions:options:)","title":"static func array(fromJSONUTF8Data: Data, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/array(fromjsonutf8data:options:)","title":"static func array(fromJSONUTF8Data: Data, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/jsonstring(from:options:)","title":"static func jsonString<C>(from: C, options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/jsonutf8data(from:options:)","title":"static func jsonUTF8Data<C>(from: C, options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/with(_:)","title":"static func with((inout Self) throws -> ()) rethrows -> Self","type":"method"}],"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest\/message-implementations","title":"Message Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationrequest","title":"Notifications_V1_RegisterInstallationRequest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/installationid","title":"var installationID: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/unknownfields","title":"var unknownFields: UnknownStorage","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/validuntil","title":"var validUntil: UInt64","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/==(_:_:)","title":"static func == (Notifications_V1_RegisterInstallationResponse, Notifications_V1_RegisterInstallationResponse) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/init(contiguousbytes:extensions:partial:options:)","title":"init<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/init(jsonstring:extensions:options:)","title":"init(jsonString: String, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/init(jsonstring:options:)","title":"init(jsonString: String, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/init(jsonutf8data:extensions:options:)","title":"init(jsonUTF8Data: Data, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/init(jsonutf8data:options:)","title":"init(jsonUTF8Data: Data, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/init(serializeddata:extensions:partial:options:)","title":"init(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/init(textformatstring:extensions:)","title":"init(textFormatString: String, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/init(textformatstring:options:extensions:)","title":"init(textFormatString: String, options: TextFormatDecodingOptions, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/init(unpackingany:extensions:options:)","title":"init(unpackingAny: Google_Protobuf_Any, extensions: ExtensionMap?, options: BinaryDecodingOptions) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/isinitialized","title":"var isInitialized: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/decodemessage(decoder:)","title":"func decodeMessage<D>(decoder: inout D) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/jsonstring(options:)","title":"func jsonString(options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/jsonutf8data(options:)","title":"func jsonUTF8Data(options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/merge(contiguousbytes:extensions:partial:options:)","title":"func merge<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/merge(serializeddata:extensions:partial:options:)","title":"func merge(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/serializeddata(partial:)","title":"func serializedData(partial: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/textformatstring()","title":"func textFormatString() -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/textformatstring(options:)","title":"func textFormatString(options: TextFormatEncodingOptions) -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/traverse(visitor:)","title":"func traverse<V>(visitor: inout V) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/protomessagename","title":"static let protoMessageName: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/array(fromjsonstring:extensions:options:)","title":"static func array(fromJSONString: String, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/array(fromjsonstring:options:)","title":"static func array(fromJSONString: String, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/array(fromjsonutf8data:extensions:options:)","title":"static func array(fromJSONUTF8Data: Data, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/array(fromjsonutf8data:options:)","title":"static func array(fromJSONUTF8Data: Data, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/jsonstring(from:options:)","title":"static func jsonString<C>(from: C, options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/jsonutf8data(from:options:)","title":"static func jsonUTF8Data<C>(from: C, options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/with(_:)","title":"static func with((inout Self) throws -> ()) rethrows -> Self","type":"method"}],"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse\/message-implementations","title":"Message Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/notifications_v1_registerinstallationresponse","title":"Notifications_V1_RegisterInstallationResponse","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/installationid","title":"var installationID: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/topics","title":"var topics: [String]","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/unknownfields","title":"var unknownFields: UnknownStorage","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/==(_:_:)","title":"static func == (Notifications_V1_SubscribeRequest, Notifications_V1_SubscribeRequest) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/init(contiguousbytes:extensions:partial:options:)","title":"init<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/init(jsonstring:extensions:options:)","title":"init(jsonString: String, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/init(jsonstring:options:)","title":"init(jsonString: String, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/init(jsonutf8data:extensions:options:)","title":"init(jsonUTF8Data: Data, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/init(jsonutf8data:options:)","title":"init(jsonUTF8Data: Data, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/init(serializeddata:extensions:partial:options:)","title":"init(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/init(textformatstring:extensions:)","title":"init(textFormatString: String, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/init(textformatstring:options:extensions:)","title":"init(textFormatString: String, options: TextFormatDecodingOptions, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/init(unpackingany:extensions:options:)","title":"init(unpackingAny: Google_Protobuf_Any, extensions: ExtensionMap?, options: BinaryDecodingOptions) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/isinitialized","title":"var isInitialized: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/decodemessage(decoder:)","title":"func decodeMessage<D>(decoder: inout D) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/jsonstring(options:)","title":"func jsonString(options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/jsonutf8data(options:)","title":"func jsonUTF8Data(options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/merge(contiguousbytes:extensions:partial:options:)","title":"func merge<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/merge(serializeddata:extensions:partial:options:)","title":"func merge(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/serializeddata(partial:)","title":"func serializedData(partial: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/textformatstring()","title":"func textFormatString() -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/textformatstring(options:)","title":"func textFormatString(options: TextFormatEncodingOptions) -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/traverse(visitor:)","title":"func traverse<V>(visitor: inout V) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/protomessagename","title":"static let protoMessageName: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/array(fromjsonstring:extensions:options:)","title":"static func array(fromJSONString: String, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/array(fromjsonstring:options:)","title":"static func array(fromJSONString: String, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/array(fromjsonutf8data:extensions:options:)","title":"static func array(fromJSONUTF8Data: Data, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/array(fromjsonutf8data:options:)","title":"static func array(fromJSONUTF8Data: Data, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/jsonstring(from:options:)","title":"static func jsonString<C>(from: C, options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/jsonutf8data(from:options:)","title":"static func jsonUTF8Data<C>(from: C, options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/with(_:)","title":"static func with((inout Self) throws -> ()) rethrows -> Self","type":"method"}],"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest\/message-implementations","title":"Message Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/notifications_v1_subscriberequest","title":"Notifications_V1_SubscribeRequest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/installationid","title":"var installationID: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/topics","title":"var topics: [String]","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/unknownfields","title":"var unknownFields: UnknownStorage","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/==(_:_:)","title":"static func == (Notifications_V1_UnsubscribeRequest, Notifications_V1_UnsubscribeRequest) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/init(contiguousbytes:extensions:partial:options:)","title":"init<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/init(jsonstring:extensions:options:)","title":"init(jsonString: String, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/init(jsonstring:options:)","title":"init(jsonString: String, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/init(jsonutf8data:extensions:options:)","title":"init(jsonUTF8Data: Data, extensions: ExtensionMap?, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/init(jsonutf8data:options:)","title":"init(jsonUTF8Data: Data, options: JSONDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/init(serializeddata:extensions:partial:options:)","title":"init(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/init(textformatstring:extensions:)","title":"init(textFormatString: String, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/init(textformatstring:options:extensions:)","title":"init(textFormatString: String, options: TextFormatDecodingOptions, extensions: ExtensionMap?) throws","type":"init"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/init(unpackingany:extensions:options:)","title":"init(unpackingAny: Google_Protobuf_Any, extensions: ExtensionMap?, options: BinaryDecodingOptions) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/isinitialized","title":"var isInitialized: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/decodemessage(decoder:)","title":"func decodeMessage<D>(decoder: inout D) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/jsonstring(options:)","title":"func jsonString(options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/jsonutf8data(options:)","title":"func jsonUTF8Data(options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/merge(contiguousbytes:extensions:partial:options:)","title":"func merge<Bytes>(contiguousBytes: Bytes, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/merge(serializeddata:extensions:partial:options:)","title":"func merge(serializedData: Data, extensions: ExtensionMap?, partial: Bool, options: BinaryDecodingOptions) throws","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/serializeddata(partial:)","title":"func serializedData(partial: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/textformatstring()","title":"func textFormatString() -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/textformatstring(options:)","title":"func textFormatString(options: TextFormatEncodingOptions) -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/traverse(visitor:)","title":"func traverse<V>(visitor: inout V) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/protomessagename","title":"static let protoMessageName: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/array(fromjsonstring:extensions:options:)","title":"static func array(fromJSONString: String, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/array(fromjsonstring:options:)","title":"static func array(fromJSONString: String, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/array(fromjsonutf8data:extensions:options:)","title":"static func array(fromJSONUTF8Data: Data, extensions: ExtensionMap, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/array(fromjsonutf8data:options:)","title":"static func array(fromJSONUTF8Data: Data, options: JSONDecodingOptions) throws -> [Self]","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/jsonstring(from:options:)","title":"static func jsonString<C>(from: C, options: JSONEncodingOptions) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/jsonutf8data(from:options:)","title":"static func jsonUTF8Data<C>(from: C, options: JSONEncodingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/with(_:)","title":"static func with((inout Self) throws -> ()) rethrows -> Self","type":"method"}],"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest\/message-implementations","title":"Message Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/notifications_v1_unsubscriberequest","title":"Notifications_V1_UnsubscribeRequest","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/preparedmessage\/decodedmessage()","title":"func decodedMessage() throws -> DecodedMessage","type":"method"},{"path":"\/documentation\/xmtp\/preparedmessage\/send()","title":"func send() async throws","type":"method"}],"path":"\/documentation\/xmtp\/preparedmessage","title":"PreparedMessage","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachment\/init(url:contentdigest:secret:salt:nonce:scheme:)","title":"init(url: String, contentDigest: String, secret: Data, salt: Data, nonce: Data, scheme: Scheme) throws","type":"init"},{"path":"\/documentation\/xmtp\/remoteattachment\/init(url:encryptedencodedcontent:)","title":"init(url: String, encryptedEncodedContent: EncryptedEncodedContent) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachment\/contentdigest","title":"var contentDigest: String","type":"property"},{"path":"\/documentation\/xmtp\/remoteattachment\/contentlength","title":"var contentLength: Int?","type":"property"},{"path":"\/documentation\/xmtp\/remoteattachment\/filename","title":"var filename: String?","type":"property"},{"path":"\/documentation\/xmtp\/remoteattachment\/nonce","title":"var nonce: Data","type":"property"},{"path":"\/documentation\/xmtp\/remoteattachment\/salt","title":"var salt: Data","type":"property"},{"path":"\/documentation\/xmtp\/remoteattachment\/scheme-swift.property","title":"var scheme: Scheme","type":"property"},{"path":"\/documentation\/xmtp\/remoteattachment\/secret","title":"var secret: Data","type":"property"},{"path":"\/documentation\/xmtp\/remoteattachment\/url","title":"var url: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachment\/content()","title":"func content() async throws -> EncodedContent","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachment\/encodeencrypted(content:codec:)","title":"static func encodeEncrypted<Codec, T>(content: T, codec: Codec) throws -> EncryptedEncodedContent","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachment\/scheme-swift.enum\/https","title":"case https","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachment\/scheme-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachment\/scheme-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/remoteattachment\/scheme-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachment\/scheme-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachment\/scheme-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xmtp\/remoteattachment\/scheme-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/remoteattachment\/scheme-swift.enum","title":"RemoteAttachment.Scheme","type":"enum"}],"path":"\/documentation\/xmtp\/remoteattachment","title":"RemoteAttachment","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachmentcodec\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachmentcodec\/contenttype","title":"var contentType: ContentTypeID","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachmentcodec\/decode(content:)","title":"func decode(content: EncodedContent) throws -> RemoteAttachment","type":"method"},{"path":"\/documentation\/xmtp\/remoteattachmentcodec\/encode(content:)","title":"func encode(content: RemoteAttachment) throws -> EncodedContent","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachmentcodec\/t","title":"RemoteAttachmentCodec.T","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachmentcodec\/id","title":"var id: String","type":"property"}],"path":"\/documentation\/xmtp\/remoteattachmentcodec\/contentcodec-implementations","title":"ContentCodec Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachmentcodec\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/xmtp\/remoteattachmentcodec\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/remoteattachmentcodec\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachmentcodec\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xmtp\/remoteattachmentcodec\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/remoteattachmentcodec","title":"RemoteAttachmentCodec","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/sendoptions\/init(compression:contenttype:contentfallback:)","title":"init(compression: EncodedContentCompression?, contentType: ContentTypeID?, contentFallback: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/sendoptions\/compression","title":"var compression: EncodedContentCompression?","type":"property"},{"path":"\/documentation\/xmtp\/sendoptions\/contentfallback","title":"var contentFallback: String?","type":"property"},{"path":"\/documentation\/xmtp\/sendoptions\/contenttype","title":"var contentType: ContentTypeID?","type":"property"}],"path":"\/documentation\/xmtp\/sendoptions","title":"SendOptions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/textcodec\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/textcodec\/contenttype","title":"var contentType: ContentTypeID","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/textcodec\/decode(content:)","title":"func decode(content: EncodedContent) throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/textcodec\/encode(content:)","title":"func encode(content: String) throws -> EncodedContent","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/textcodec\/t","title":"TextCodec.T","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/textcodec\/id","title":"var id: String","type":"property"}],"path":"\/documentation\/xmtp\/textcodec\/contentcodec-implementations","title":"ContentCodec Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/textcodec\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/xmtp\/textcodec\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/textcodec\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/textcodec\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xmtp\/textcodec\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/textcodec","title":"TextCodec","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/xmtppush\/register(token:)","title":"func register(token: String) async throws","type":"method"},{"path":"\/documentation\/xmtp\/xmtppush\/request()","title":"func request() async throws -> Bool","type":"method"},{"path":"\/documentation\/xmtp\/xmtppush\/setpushserver(_:)","title":"func setPushServer(String)","type":"method"},{"path":"\/documentation\/xmtp\/xmtppush\/subscribe(topics:)","title":"func subscribe(topics: [String]) async throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/xmtppush\/shared","title":"static var shared: XMTPPush","type":"property"}],"path":"\/documentation\/xmtp\/xmtppush","title":"XMTPPush","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/xmtp\/contenttypeattachment","title":"let ContentTypeAttachment: ContentTypeID","type":"var"},{"path":"\/documentation\/xmtp\/contenttyperemoteattachment","title":"let ContentTypeRemoteAttachment: ContentTypeID","type":"var"},{"path":"\/documentation\/xmtp\/contenttypetext","title":"let ContentTypeText: ContentTypeID","type":"var"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/ciphertext","title":"CipherText","type":"typealias"},{"path":"\/documentation\/xmtp\/contenttypeid","title":"ContentTypeID","type":"typealias"},{"path":"\/documentation\/xmtp\/encodedcontent","title":"EncodedContent","type":"typealias"},{"path":"\/documentation\/xmtp\/envelope","title":"Envelope","type":"typealias"},{"path":"\/documentation\/xmtp\/invitationv1","title":"InvitationV1","type":"typealias"},{"path":"\/documentation\/xmtp\/message","title":"Message","type":"typealias"},{"path":"\/documentation\/xmtp\/privatekey","title":"PrivateKey","type":"typealias"},{"path":"\/documentation\/xmtp\/privatekeybundle","title":"PrivateKeyBundle","type":"typealias"},{"path":"\/documentation\/xmtp\/privatekeybundlev1","title":"PrivateKeyBundleV1","type":"typealias"},{"path":"\/documentation\/xmtp\/privatekeybundlev2","title":"PrivateKeyBundleV2","type":"typealias"},{"path":"\/documentation\/xmtp\/sealedinvitationheaderv1","title":"SealedInvitationHeaderV1","type":"typealias"},{"path":"\/documentation\/xmtp\/signature","title":"Signature","type":"typealias"},{"path":"\/documentation\/xmtp\/signedprivatekey","title":"SignedPrivateKey","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachmentcodecerror\/invalidparameters","title":"case invalidParameters","type":"case"},{"path":"\/documentation\/xmtp\/attachmentcodecerror\/unknowndecodingerror","title":"case unknownDecodingError","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachmentcodecerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/attachmentcodecerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/attachmentcodecerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xmtp\/attachmentcodecerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/attachmentcodecerror","title":"AttachmentCodecError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversation\/v1(_:)","title":"case v1(ConversationV1)","type":"case"},{"path":"\/documentation\/xmtp\/conversation\/v2(_:)","title":"case v2(ConversationV2)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversation\/conversationid","title":"var conversationID: String?","type":"property"},{"path":"\/documentation\/xmtp\/conversation\/createdat","title":"var createdAt: Date","type":"property"},{"path":"\/documentation\/xmtp\/conversation\/encodedcontainer","title":"var encodedContainer: ConversationContainer","type":"property"},{"path":"\/documentation\/xmtp\/conversation\/peeraddress","title":"var peerAddress: String","type":"property"},{"path":"\/documentation\/xmtp\/conversation\/topic","title":"var topic: String","type":"property"},{"path":"\/documentation\/xmtp\/conversation\/version-swift.property","title":"var version: Version","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversation\/decode(_:)","title":"func decode(Envelope) throws -> DecodedMessage","type":"method"},{"path":"\/documentation\/xmtp\/conversation\/encode(codec:content:)","title":"func encode<Codec, T>(codec: Codec, content: T) async throws -> Data","type":"method"},{"path":"\/documentation\/xmtp\/conversation\/messages(limit:before:after:)","title":"func messages(limit: Int?, before: Date?, after: Date?) async throws -> [DecodedMessage]","type":"method"},{"path":"\/documentation\/xmtp\/conversation\/preparemessage(content:options:)","title":"func prepareMessage<T>(content: T, options: SendOptions?) async throws -> PreparedMessage","type":"method"},{"path":"\/documentation\/xmtp\/conversation\/send(content:options:fallback:)","title":"func send<T>(content: T, options: SendOptions?, fallback: String?) async throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/conversation\/send(text:options:)","title":"func send(text: String, options: SendOptions?) async throws -> String","type":"method"},{"path":"\/documentation\/xmtp\/conversation\/streammessages()","title":"func streamMessages() -> AsyncThrowingStream<DecodedMessage, Error>","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversation\/version-swift.enum\/v1","title":"case v1","type":"case"},{"path":"\/documentation\/xmtp\/conversation\/version-swift.enum\/v2","title":"case v2","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversation\/version-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/conversation\/version-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/conversation\/version-swift.enum","title":"Conversation.Version","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/xmtp\/conversation\/==(_:_:)","title":"static func == (Conversation, Conversation) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/conversation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversation\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xmtp\/conversation\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/conversation","title":"Conversation","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationcontainer\/v1(_:)","title":"case v1(ConversationV1Container)","type":"case"},{"path":"\/documentation\/xmtp\/conversationcontainer\/v2(_:)","title":"case v2(ConversationV2Container)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationcontainer\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationcontainer\/decode(with:)","title":"func decode(with: Client) -> Conversation","type":"method"}],"path":"\/documentation\/xmtp\/conversationcontainer","title":"ConversationContainer","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationerror\/recipientissender","title":"case recipientIsSender","type":"case"},{"path":"\/documentation\/xmtp\/conversationerror\/recipientnotonnetwork","title":"case recipientNotOnNetwork","type":"case"},{"path":"\/documentation\/xmtp\/conversationerror\/v1notsupported(_:)","title":"case v1NotSupported(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/conversationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xmtp\/conversationerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/conversationerror","title":"ConversationError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/encodedcontentcompression\/deflate","title":"case deflate","type":"case"},{"path":"\/documentation\/xmtp\/encodedcontentcompression\/gzip","title":"case gzip","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/encodedcontentcompression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/encodedcontentcompression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/encodedcontentcompression","title":"EncodedContentCompression","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/messageversion\/v1","title":"case v1","type":"case"},{"path":"\/documentation\/xmtp\/messageversion\/v2","title":"case v2","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/messageversion\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/messageversion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/messageversion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/messageversion\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/messageversion\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xmtp\/messageversion\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/messageversion","title":"MessageVersion","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachmenterror\/invaliddigest(_:)","title":"case invalidDigest(String)","type":"case"},{"path":"\/documentation\/xmtp\/remoteattachmenterror\/invalidparameters(_:)","title":"case invalidParameters(String)","type":"case"},{"path":"\/documentation\/xmtp\/remoteattachmenterror\/invalidscheme(_:)","title":"case invalidScheme(String)","type":"case"},{"path":"\/documentation\/xmtp\/remoteattachmenterror\/invalidurl","title":"case invalidURL","type":"case"},{"path":"\/documentation\/xmtp\/remoteattachmenterror\/payloadnotfound","title":"case payloadNotFound","type":"case"},{"path":"\/documentation\/xmtp\/remoteattachmenterror\/v1notsupported","title":"case v1NotSupported","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/remoteattachmenterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/xmtp\/remoteattachmenterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/remoteattachmenterror","title":"RemoteAttachmentError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/xmtp\/xmtpenvironment\/dev","title":"case dev","type":"case"},{"path":"\/documentation\/xmtp\/xmtpenvironment\/local","title":"case local","type":"case"},{"path":"\/documentation\/xmtp\/xmtpenvironment\/production","title":"case production","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/xmtp\/xmtpenvironment\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/xmtp\/xmtpenvironment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/xmtp\/xmtpenvironment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/xmtp\/xmtpenvironment\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/xmtp\/xmtpenvironment\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/xmtp\/xmtpenvironment\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/xmtp\/xmtpenvironment","title":"XMTPEnvironment","type":"enum"}],"path":"\/documentation\/xmtp","title":"XMTP","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}